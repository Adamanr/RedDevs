defmodule Reddevs.Repo.Migrations.Articles do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:articles, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :slug, :text, null: false
      add :excerpt, :text
      add :category, :text, null: false
      add :content, :text, null: false
      add :content_html, :text
      add :featured_image_url, :text
      add :meta_description, :text
      add :meta_keywords, {:array, :text}, default: []
      add :tags, {:array, :text}, default: []
      add :status, :text, default: "draft"
      add :published_at, :utc_datetime_usec
      add :reading_time_minutes, :bigint, default: 0
      add :view_count, :bigint, default: 0
      add :like_count, :bigint, default: 0
      add :comment_count, :bigint, default: 0
      add :is_featured, :boolean, default: false
      add :allow_comments, :boolean, default: true
      add :seo_optimized, :boolean, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :author_id,
          references(:users,
            column: :id,
            name: "articles_author_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:articles, [:slug], name: "articles_unique_slug_index")

    create table(:article_views, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :article_id,
          references(:articles,
            column: :id,
            name: "article_views_article_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "article_views_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:article_views, [:article_id, :user_id],
             name: "article_views_unique_view_index"
           )

    create table(:article_likes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :article_id,
          references(:articles,
            column: :id,
            name: "article_likes_article_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "article_likes_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:article_likes, [:article_id, :user_id],
             name: "article_likes_unique_like_index"
           )

    create table(:article_comments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false

      add :parent_id,
          references(:article_comments,
            column: :id,
            name: "article_comments_parent_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :is_hidden, :boolean, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :article_id,
          references(:articles,
            column: :id,
            name: "article_comments_article_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :author_id,
          references(:users,
            column: :id,
            name: "article_comments_author_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end
  end

  def down do
    drop constraint(:article_comments, "article_comments_parent_id_fkey")

    drop constraint(:article_comments, "article_comments_article_id_fkey")

    drop constraint(:article_comments, "article_comments_author_id_fkey")

    drop table(:article_comments)

    drop_if_exists unique_index(:article_likes, [:article_id, :user_id],
                     name: "article_likes_unique_like_index"
                   )

    drop constraint(:article_likes, "article_likes_article_id_fkey")

    drop constraint(:article_likes, "article_likes_user_id_fkey")

    drop table(:article_likes)

    drop_if_exists unique_index(:article_views, [:article_id, :user_id],
                     name: "article_views_unique_view_index"
                   )

    drop constraint(:article_views, "article_views_article_id_fkey")

    drop constraint(:article_views, "article_views_user_id_fkey")

    drop table(:article_views)

    drop_if_exists unique_index(:articles, [:slug], name: "articles_unique_slug_index")

    drop constraint(:articles, "articles_author_id_fkey")

    drop table(:articles)
  end
end
