defmodule Reddevs.Repo.Migrations.Accounts do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text
      add :username, :text, null: false
      add :name, :text
      add :pronouns, :text, default: "robot"
      add :bio, :text
      add :website_url, :text
      add :location, :text
      add :employer_name, :text
      add :employer_url, :text
      add :currently_learning, {:array, :text}
      add :available_for, :text

      add :profile_image, :text,
        default: "https://i.pinimg.com/736x/97/29/31/972931f5f61451c5b0bed5f3a0520ec5.jpg"

      add :cover_image, :text,
        default: "https://i.pinimg.com/736x/a4/a5/3d/a4a53d08b410f3f4949f5ceada6c7492.jpg"

      add :links, :map
      add :preferred_language, :text, default: "en"
      add :theme, :text, default: "light"
      add :config, :map
      add :moderation_notes, :text
      add :trust_level, :bigint, default: 0
      add :article_count, :bigint, default: 0
      add :comment_count, :bigint, default: 0
      add :reputation, :bigint, default: 0
      add :badges, {:array, :text}, default: []
      add :last_seen_at, :utc_datetime_usec
      add :accepted_code_of_conduct, :boolean, default: false
      add :accepted_terms_and_conditions, :boolean, default: false
      add :confirmed_at, :utc_datetime_usec
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create unique_index(:users, [:username], name: "users_unique_username_index")

    create table(:tokens, primary_key: false) do
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :user_id,
          references(:users,
            column: :id,
            name: "tokens_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:notifications, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :type, :text
      add :read, :boolean, default: false
      add :metadata, :map
      add :inserted_at, :utc_datetime_usec, default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "notifications_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:follows, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :follower_id,
          references(:users,
            column: :id,
            name: "follows_follower_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :followed_id,
          references(:users,
            column: :id,
            name: "follows_followed_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end
  end

  def down do
    drop constraint(:follows, "follows_follower_id_fkey")

    drop constraint(:follows, "follows_followed_id_fkey")

    drop table(:follows)

    drop constraint(:notifications, "notifications_user_id_fkey")

    drop table(:notifications)

    drop constraint(:tokens, "tokens_user_id_fkey")

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:username], name: "users_unique_username_index")

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
