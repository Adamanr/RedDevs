defmodule Reddevs.Repo.Migrations.Posts do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:posts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :content, :text, null: false
      add :slug, :text, null: false
      add :status, :text, default: "draft"
      add :description, :text, default: ""
      add :header, :text
      add :tags, {:array, :text}, default: []
      add :views_count, :bigint, default: 0
      add :likes_count, :bigint, default: 0
      add :comments_count, :bigint, default: 0
      add :meta_description, :text
      add :meta_keywords, {:array, :text}, default: []
      add :allow_comments, :boolean, default: true
      add :seo_optimized, :boolean, default: false
      add :published_at, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :author_id,
          references(:users,
            column: :id,
            name: "posts_author_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:posts, [:slug], name: "posts_unique_slug_index")

    create table(:post_views, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :post_id,
          references(:posts,
            column: :id,
            name: "post_views_post_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "post_views_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:post_views, [:post_id, :user_id], name: "post_views_unique_view_index")

    create table(:post_likes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :post_id,
          references(:posts,
            column: :id,
            name: "post_likes_post_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "post_likes_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:post_likes, [:post_id, :user_id], name: "post_likes_unique_like_index")

    create table(:post_comments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false

      add :parent_id,
          references(:post_comments,
            column: :id,
            name: "post_comments_parent_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :is_hidden, :boolean, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :post_id,
          references(:posts,
            column: :id,
            name: "post_comments_post_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :author_id,
          references(:users,
            column: :id,
            name: "post_comments_author_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end
  end

  def down do
    drop constraint(:post_comments, "post_comments_parent_id_fkey")

    drop constraint(:post_comments, "post_comments_post_id_fkey")

    drop constraint(:post_comments, "post_comments_author_id_fkey")

    drop table(:post_comments)

    drop_if_exists unique_index(:post_likes, [:post_id, :user_id],
                     name: "post_likes_unique_like_index"
                   )

    drop constraint(:post_likes, "post_likes_post_id_fkey")

    drop constraint(:post_likes, "post_likes_user_id_fkey")

    drop table(:post_likes)

    drop_if_exists unique_index(:post_views, [:post_id, :user_id],
                     name: "post_views_unique_view_index"
                   )

    drop constraint(:post_views, "post_views_post_id_fkey")

    drop constraint(:post_views, "post_views_user_id_fkey")

    drop table(:post_views)

    drop_if_exists unique_index(:posts, [:slug], name: "posts_unique_slug_index")

    drop constraint(:posts, "posts_author_id_fkey")

    drop table(:posts)
  end
end
